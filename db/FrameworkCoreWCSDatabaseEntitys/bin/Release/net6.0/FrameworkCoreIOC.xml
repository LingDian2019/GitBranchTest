<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FrameworkCoreIOC</name>
    </assembly>
    <members>
        <member name="T:FrameworkCoreIOC.AutofacContainer">
            <summary>
            Autofac 容器
            </summary>
        </member>
        <member name="P:FrameworkCoreIOC.AutofacContainer.Instance">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:FrameworkCoreIOC.AutofacContainer.Init(System.Func{Autofac.ContainerBuilder,Autofac.ContainerBuilder},Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            初始化
            </summary>
            <param name="func"></param>
            <param name="serviceCollection"></param>
        </member>
        <member name="M:FrameworkCoreIOC.AutofacContainer.MyBuild(Autofac.ContainerBuilder)">
            <summary>
            自定义注册
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:FrameworkCoreIOC.AutomaticInjectExtension">
            <summary>
            自动注入
            </summary>
        </member>
        <member name="M:FrameworkCoreIOC.AutomaticInjectExtension.AutomaticFrameworkCoreModules(Autofac.ContainerBuilder)">
            <summary>
            自动注入 FrameworkCore Modules
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:FrameworkCoreIOC.AutomaticInjectExtension.AutomaticSingleInstance(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            自动注入 SingleInstance
            全局单例 即全局只有一个实例，在根容器和所有嵌套作用域内，每次解析返回的都是同一个实例。
            </summary>
            <param name="builder"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:FrameworkCoreIOC.AutomaticInjectExtension.AutomaticInstancePerDependency(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            自动注入 InstancePerDependency
            瞬时单例 也叫每个依赖一个实例。即每次从容器里拿出来的都是全新对象，相当于每次都new出一个。
            </summary>
            <param name="builder"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:FrameworkCoreIOC.AutomaticInjectExtension.AutomaticInstancePerLifetimeScope(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            自动注入 InstancePerLifetimeScope
            域内单例 即在每个生命周期域内是单例的。
            </summary>
            <param name="builder"></param>
            <param name="assembly"></param>
        </member>
        <member name="T:FrameworkCoreIOC.LifetimeScopeExtension">
            <summary>
            LifetimeScope 扩展
            </summary>
        </member>
        <member name="M:FrameworkCoreIOC.LifetimeScopeExtension.GetServiceByName(Autofac.ILifetimeScope,System.String,System.Type)">
            <summary>
            根据名称获取实体
            </summary>
            <param name="lifetimeScope"></param>
            <param name="serviceName"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:FrameworkCoreIOC.LifetimeScopeExtension.GetServiceByName``1(Autofac.ILifetimeScope,System.String)">
            <summary>
            根据名称获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lifetimeScope"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:FrameworkCoreIOC.LifetimeScopeExtension.GetService``1(Autofac.ILifetimeScope,Autofac.NamedParameter[])">
            <summary>
            获取服务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lifetimeScope"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:FrameworkCoreIOC.FrameworkCoreIOCModule">
            <summary>
            IOC Extend 模块
            </summary>
        </member>
        <member name="M:FrameworkCoreIOC.FrameworkCoreIOCModule.Load(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:FrameworkCoreIOC.IAutomaticInstancePerDependency">
            <summary>
            默认模式，每次调用，都会重新实例化对象；每次请求都创建一个新的对象；
            </summary>
        </member>
        <member name="T:FrameworkCoreIOC.IAutomaticInstancePerLifetimeScope">
            <summary>
            同一个Lifetime生成的对象是同一个实例
            </summary>
        </member>
        <member name="T:FrameworkCoreIOC.IAutomaticSingleInstance">
            <summary>
            单例模式，每次调用，都会使用同一个实例化的对象；每次都用同一个对象；
            </summary>
        </member>
    </members>
</doc>
